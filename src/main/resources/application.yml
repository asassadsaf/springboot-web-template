spring:
  application:
    name: service-template
  main:
    #是否允许Bean循环引用
    allow-circular-references: false
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    url: "jdbc:sqlite:${spring.application.name}/database/sqlite3/core/sqlite3.db"
    driver-class-name: org.sqlite.JDBC
    druid:
      # 建立tcp连接超时时间 默认10秒
      connect-timeout: 10000
      # tcp响应超时时间 默认10秒
      socket-timeout: 10000
      # 从连接池获取连接的超时时间 默认-1
      max-wait: 30000
      # 初始连接数 默认0
      initial-size: 0
      # 最小连接数 默认0
      min-idle: 0
      # 最大连接数 默认8
      max-active: 8
      # 获取连接时校验连接可用性 默认false
      test-on-borrow: false
      # 连接归还连接池时校验连接可用性 默认false
      test-on-return: false
      # 从连接池获取连接时若连接空闲时间大于timeBetweenEvictionRunsMillis就执行validationQuery校验连接是否可用 默认true
      test-while-idle: true
      # 校验连接时执行的sql
      validation-query: SELECT 1
      # 大于该空闲时间且testWhileIdle=true时执行validationQuery校验 默认60秒
      time-between-eviction-runs-millis: 60000
      # 大于该空闲时间且连接数大于minIdle就逐出 默认30分钟
      min-evictable-idle-time-millis: 1800000
      # 大于该空闲时间逐出连接池 默认7小时
      max-evictable-idle-time-millis: 25200000
      # 是否开启连接保活，定时发送心跳包 默认false
      keep-alive: false
      # 连接保活发送心跳间隔时间 默认timeBetweenEvictionRunsMillis * 2
      keep-alive-between-time-millis: 120000
  # 程序启动初始化sql配置
  sql:
    init:
      # ALWAYS、EMBEDDED(嵌入数据库才执行)、NEVER
      mode: ALWAYS
      # ddl脚本路径
      schema-locations: "file:${application.path}/database/sqlite3/sql/sqlite3_DDL.sql"
      # dml脚本路径
      data-locations: "file:${application.path}/database/sqlite3/sql/sqlite3_DML.sql"
      # 发生错误是否继续
      continue-on-error: false
      # sql脚本编码
      encoding: UTF-8
#   redis 配置项
  redis:
    # 连接URL，配置后会覆盖host、port等配置，eg: redis://user:password@example.com:6379
#    url: redis://user:password@example.com:6379
    # redis server ip
    host: 10.0.104.78
    # redis server port
    port: 6379
    # 连接工厂使用的数据库索引（0-15），默认为0
    database: 0
    # Redis服务器连接用户
#    username: test
    # Redis服务器连接密码（默认为空）
#    password: test
    # 是否启用SSL支持
    ssl: false
    # 读取超时
    timeout: 5000
    # 连接超时
    connect-timeout: 10000
    # 在与CLIENT SETNAME的连接上设置的客户端名称
    client-name: test
    # 要使用的客户端类型。默认情况下，根据类路径自动检测
    client-type: lettuce
#    # Redis哨兵属性
#    sentinel:
#      # Redis服务器名称
#      master: test
#      # 哨兵节点，以逗号分隔的“ host：port”对列表
#      nodes: xxxx
#      # 用于使用哨兵进行身份验证的密码
#      password: test
#    # 集群属性
#    cluster:
#      # 以逗号分隔的“ host：port”对列表，这表示集群节点的“初始”列表，并且要求至少具有一个条目
#      nodes: xxxx
#      # 在集群中执行命令时要遵循的最大重定向数
#      max-redirects: 1
#      refresh:
#        # 拓扑动态感应即客户端能够根据 redis cluster 集群的变化，动态改变客户端的节点情况，完成故障转移。
#        adaptive: true
#        # 是否发现和查询所有群集节点以获取群集拓扑。设置为false时，仅将初始种子节点用作拓扑发现的源
#        dynamic-refresh-sources: false
#        # 集群拓扑刷新周期
#        period: 1000
    # 连接池配置
    lettuce:
      pool:
        # 连接池池中“空闲”连接的最大数量。使用负值表示无限数量的空闲连接，默认为8
        max-idle: 8
        # 中维护的最小空闲连接数，默认为0
        min-idle: 0
        # 连接池可以分配的最大连接数。使用负值表示没有限制，默认为8
        max-active: 8
        # 当连接池耗尽时，在抛出异常之前，连接分配应阻塞的最长时间。使用负值无限期等待，默认为-1
        max-wait: -1
        # 空闲连接从运行到退出的时间间隔。当为正时，空闲连接回收线程启动，否则不执行空闲连接回收
        time-between-eviction-runs: -1
        # 宕机超时时间，默认100ms
        shutdown-timeout: 100
  task:
    scheduling:
      thread-name-prefix: scheduling-
      pool:
        size: 8
    execution:
      thread-name-prefix: task-
      pool:
        # 最大线程数，当任务队列满时再有任务提交则会创建非核心线程处理任务，线程总数最多不会超过maxSize
        max-size: 32
        # 任务队列大小
        queue-capacity: 256
        # 核心线程数，若当前池中线程数不到coreSize,有新的任务提交会创建新的线程执行，若线程数达到coreSize则会放入任务队列
        core-size: 8
        # 是否允许核心线程超时回收
        allow-core-thread-timeout: true
        # 线程空闲时间超过该时间则会被回收,Duration类型可以通过时间字符串自动转换
        keep-alive: 60s

server:
  ssl:
    enabled: true
    key-store-type: jks
    key-store: classpath:rsa_server.jks
    key-store-password: swxa@2024
    ciphers:
      - TLS_AES_256_GCM_SHA384
      - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
      - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
  port: 8080

# ${application.path}为Jar包同级目录
business:
  specification: 1.0.0
  serverName: ${spring.application.name}
  serverVersion: ${business.specification}-RC1+buildinit
  serverInfo: ${business.serverName}/${business.serverVersion}
  vendor: FKP
  shellPath:
    getSourceIps: "${application.path}/config/shell/getSourceIps.sh"
  policy:
    path: "${application.path}/config/policy/policy.yml"
  databaseIntegrity:
    dataSourceCache:
      maxSize: 128
      expireAfterAccessMinute: 1440
    verifySchedulingRate: 10
    connectTimeOut: 5000
    minEvictableIdleTimeMillis: 30000
  statistic:
    callCountCron: 0/10 * * * * ?
remote:
  restUrl: https://localhost:7077/test

# 配置log4j2配置文件路径
logging:
  config: "${application.path}/config/log4j2.xml"

mybatis-plus:
  # 指定mapper xml的位置
  mapper-locations:
    - classpath:mappers/*/*.xml
  # 指定类型转换器包位置
  type-handlers-package: com.fkp.template.core.config.database.typehandler

database:
  type: sqlite

synthesis:
  lmk1: +Rvtz3+unEEL0RfTtEsDBQ==
  lmk2FilePath: "${application.path}/config/synthesis/synthesis.key"

authentication:
  username: fkp
  # 123456
  password: +okwiyFQnFtRpa4YOONg+Q==
  token:
    header: Authorization
    secret: abcdefghij0123456789ABCDEFGHIJKL
    expireTime: 30
